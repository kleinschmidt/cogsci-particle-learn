
```julia
using Revise
using Underscore
using Particles, Distributions, ConjugatePriors, DataFrames, DataFramesMeta, JLD2
using Gadfly
```

```julia
Revise.track("VOTs.jl")
Revise.track("Experiments.jl")
```

```julia
using Experiments, VOTs
```

# Run 1

This has $\alpha = \{0.01, 0.1, 1, 10\}$, $N_\mathrm{particles} = \{10, 100, 1000\}$, and $N_\mathrm{observations} = \{10, 100, 1000\}$, each run on 200 random datasets.

```julia
@load "results/run1-2018-01-27T23:24:32.675.jld2" exs results
```

```julia
ers = flatten(exs, results, :num_obs)
```

```julia
run1_summary = results_summary(ers)
```

## Success by α and number of observations

"Success" is defined by the MAP particle having exactly 2 components.  Success is best for low alpha and more particles.  Interestingly, with very low alpha (0.01), you get to the same rate of success after 1,000 observations as with low (0.1)



```julia
plot(run1_summary, x=:num_obs, y=:success, color=:num_particle, xgroup=:α,
     Geom.subplot_grid(Geom.line, Geom.point), Scale.x_log10, Scale.color_discrete)
```

For alpha = 1.0, success rises but then falls as the model imputes more clusters:

```julia
plot(run1_summary, x=:num_obs, y=:avg_K_mean, color=:num_particle, xgroup=:α,
     Geom.subplot_grid(Geom.line, Geom.point), Scale.x_log10, Scale.y_log2, Scale.color_discrete)
```

## Probability assigned to $K=2$

Another measure of success is how much posterior probability the model assigns to solutions with exactly two clusters.

```julia
plot(run1_summary, x=:num_obs, y=:avg_p_K2, color=:num_particle, xgroup=:α,
     Geom.subplot_grid(Geom.line, Geom.point), Scale.x_log10, Scale.color_discrete)
```

# Run 2

This has more values of $N_\mathrm{observations}$ (up to 10,000) and $N_\mathrm{particles}$ (down to 1).

```julia
@load "results/run2-2018-01-30T10:05:12.518.jld2" exs results
```

```julia
run2_ers = flatten(exs, results, :num_obs)
run2_summary = results_summary(run2_ers)
```

```julia
@where(run2_summary, isnan.(:avg_K_mean))
```

I'm not sure where these NaNs are coming from but I think it's all from the 1-particle runs?

## Success by α and number of observations

"Success" is defined by the MAP particle having exactly 2 components.  Success is best for low alpha and more particles.  Interestingly, with very low alpha (0.01), you get to the same rate of success after 1,000 observations as with low (0.1)



```julia
plot(run2_summary, x=:num_obs, y=:success, color=:num_particle, xgroup=:α,
     Geom.subplot_grid(Geom.line, Geom.point), Scale.x_log10, Scale.color_discrete)
```

For alpha = 1.0, success rises but then falls as the model imputes more clusters:

```julia
plot(run2_summary, x=:num_obs, y=:avg_K_mean, color=:num_particle, xgroup=:α,
     Geom.subplot_grid(Geom.line, Geom.point), Scale.x_log10, Scale.y_log2, Scale.color_discrete)
```

## Probability assigned to $K=2$

Another measure of success is how much posterior probability the model assigns to solutions with exactly two clusters.

```julia
plot(run2_summary, x=:num_obs, y=:avg_p_K2, color=:num_particle, xgroup=:α,
     Geom.subplot_grid(Geom.line, Geom.point), Scale.x_log10, Scale.color_discrete)
```

# Distribution over number of clusters

Let's actually look at the $p(K | x_{1:n})$ distributions

```julia
run2_p_of_K = @_ run2_ers |>
    [Dict(er...) for er in _] |>
    dictofarrays |>
    DataFrame |>
    by(_, [:num_particle, :num_obs, :α]) do d
        pks = d[:p_of_K]
        max_k = maximum(length.(pks))
        ps = zeros(Float64, max_k)
        for pk in pks
            ps[1:length(pk)] .+= pk
        end
        DataFrame(K=1:max_k, p_of_K = ps ./ size(d,1))
    end
```

```julia
p_of_k_plot = @_ run2_p_of_K |> 
    @where(_, :α .< 10) |> 
    plot(_, x=:K, y=:p_of_K, ygroup=:num_particle, xgroup=:α, color=:num_obs,
         Geom.subplot_grid(Geom.line), Scale.color_log10);

draw(SVG(30cm, 15cm), p_of_k_plot)
```

# Gibbs sampler baseline

This is run with the same data/parameters as Run 1, using a Gibbs sampler.

```julia
@load "results/run1_gibbs_2018-01-30T12:18:31.076.jld2" gibbs_exs gibbs_res
```

```julia
gibbs_summary = results_summary(zip(gibbs_exs, gibbs_res))
```

There's something up with how the MAP estimate is calculated here...they all come up as 1.  I think the most reasonable measure is $p(K=2 | x)$, anyway: it's a good Bayesian estimate.

```julia
plot(gibbs_summary, x=:num_obs, y=:avg_p_K2, color=:num_particle, xgroup=:α,
     Geom.subplot_grid(Geom.line, Geom.point), Scale.x_log10, Scale.color_discrete)
```

```julia
plot(gibbs_summary, x=:num_obs, y=:avg_K_mean, color=:num_particle, xgroup=:α,
     Geom.subplot_grid(Geom.line, Geom.point), Scale.x_log10, Scale.y_log2, Scale.color_discrete)
```

```julia
vots = reduce(vcat, unique(e.params[:data] for e in gibbs_exs))
```

```julia
plot(x=vots ,Geom.histogram(bincount=30, density=true))
```

```julia
gibbs_p_of_K = @_ zip(gibbs_exs, gibbs_res) |>
    [Dict(er...) for er in _] |>
    dictofarrays |>
    DataFrame |>
    by(_, [:num_particle, :num_obs, :α]) do d
        pks = d[:p_of_K]
        max_k = maximum(length.(pks))
        ps = zeros(Float64, max_k)
        for pk in pks
            ps[1:length(pk)] .+= pk
        end
        DataFrame(K=1:max_k, p_of_K = ps ./ size(d,1))
    end
```

```julia
@_ gibbs_p_of_K |> 
    @where(_, :α .< 10) |> 
    plot(_, x=:K, y=:p_of_K, ygroup=:num_particle, xgroup=:α, color=:num_obs,
         Geom.subplot_grid(Geom.line), Scale.color_log10) |>
    draw(SVG(30cm, 15cm), _)
```

## Comparing particle and gibbs

Just pick one number of observations and samples since it doesn't vary much.

```julia
gibbs_summary_one = @where(gibbs_summary, :num_obs .== 1000, :num_particle .== 1000)
```

```julia
using Colors
ngray(start, finish) = n -> linspace(Gray(start), Gray(finish), n)

@_ @where(gibbs_p_of_K, :num_obs .== 1000, :num_particle .== 1000) |>
    @transform(_, num_particle_ = "Gibbs") |>
    vcat(_, @transform(run2_p_of_K, num_particle_ = string.(:num_particle))) |>
    @transform(_, α_str = ifelse.(:α .== 0.01, "α = 0.01", string.(:α))) |>
    @where(_, :num_particle_ .!= "1", :α .!= 10, :K .< 9) |>
    plot(_, x=:K, y=:p_of_K, ygroup=:num_particle_, xgroup=:α_str, color=:num_obs,
         Geom.subplot_grid(Geom.line, Guide.xticks(orientation=:horizontal)), 
         Scale.color_discrete(ngray(0.8, 0.0), levels=[10, 100, 1_000, 10_000]), 
         Guide.colorkey(title="Observations"), 
         Guide.ylabel("Probability of cluster number \n(by number of particles)", :vertical)) |>
    draw(SVG(7.5inch, 4inch), _)
```
